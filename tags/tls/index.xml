<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tls on 麦克的茶馆</title><link>/tags/tls/</link><description>Recent content in tls on 麦克的茶馆</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 13 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/tls/index.xml" rel="self" type="application/rss+xml"/><item><title>centos 8启用nginx stream ssl preread module</title><link>/post/nginx-stream-preread-enable/</link><pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate><guid>/post/nginx-stream-preread-enable/</guid><description>&lt;p>目标: 为了让nginx服务器,根据不同的域名,转发到不同的app服务器. tls并不终结在nginx,而是转发到最终的app服务器.&lt;/p>
&lt;p>在centos 8上,运行&lt;/p>
&lt;pre>&lt;code>#nginx -V
结果:
nginx version: nginx/1.14.1
built by gcc 8.5.0 20210514 (Red Hat 8.5.0-3) (GCC)
built with OpenSSL 1.1.1k FIPS 25 Mar 2021
TLS SNI support enabled
configure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body \
--http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \
--http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx \
--user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
--with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic \
--with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \
--with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module \
--with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic \
--with-stream_ssl_module --with-debug --with-cc-opt='-O2 -g -pipe -Wall -Werror=format-security -Wp,\
-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches \
-specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic \
-fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E
&lt;/code>&lt;/pre>
&lt;p>这里面,主要是看有没有 &amp;ldquo;&amp;ndash;with-stream_ssl_preread_module&amp;rdquo; 这个参数,没有这个参数,nginx没法提前从流里面得到域名,也就无法转发,需要重新编译nginx&lt;/p>
&lt;h2 id="1-重新编译nginx">1 重新编译nginx&lt;/h2>
&lt;h3 id="11-下载nginx的源码">1.1 下载nginx的源码.&lt;/h3>
&lt;p>为了最小改动,选择1.14.2版本&lt;/p>
&lt;pre>&lt;code>wget https://nginx.org/download/nginx-1.14.2.tar.gz
tar zxvf nginx-1.14.2.tar.gz
cd nginx-1.14.2
&lt;/code>&lt;/pre>
&lt;h3 id="12-安装编译环境以及需要的包">1.2 安装编译环境,以及需要的包.&lt;/h3>
&lt;pre>&lt;code>sudo yum -y groupinstall &amp;quot;Development Tools&amp;quot;
sudo yum -y install libxslt-devel
sudo yum -y install gd gd-devel
sudo yum -y install pcre-devel
sudo yum -y install perl-ExtUtils-Embed
&lt;/code>&lt;/pre>
&lt;h3 id="13-编译nginx">1.3 编译nginx&lt;/h3>
&lt;pre>&lt;code>/configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid \
--lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module \
--with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module\
--with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module \
--with-stream_ssl_preread_module --with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic \
--with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-debug \
--with-cc-opt='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches\
-specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 \
-mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' \
--with-ld-opt='-Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E'
成功之后
make
成功之后,先删掉原来的nginx
sudo yum remove nginx
安装新编译好的nginx
sudo make install
&lt;/code>&lt;/pre>
&lt;h3 id="14-修改配置文件">1.4 修改配置文件&lt;/h3>
&lt;pre>&lt;code>sudo vi /etc/systemd/system/nginx.service
内容如下:
[Unit]
Description=The nginx HTTP and reverse proxy server
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target
[Service]
Type=forking
PIDFile=/run/nginx.pid
# Nginx will fail to start if /run/nginx.pid already exists but has the wrong
# SELinux context. This might happen when running `nginx -t` from the cmdline.
# https://bugzilla.redhat.com/show_bug.cgi?id=1268621
ExecStartPre=/usr/bin/rm -f /run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
KillSignal=SIGQUIT
TimeoutStopSec=5
KillMode=mixed
PrivateTmp=true
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>
&lt;p>然后执行&lt;/p>
&lt;pre>&lt;code> sudo systemctl daemon-reload
&lt;/code>&lt;/pre>
&lt;p>编辑 /etc/nginx/nginx.conf
在文件第一行,增加&lt;/p>
&lt;pre>&lt;code>load_module /usr/lib64/nginx/modules/ngx_stream_module.so;
stream {
# 这里就是 SNI 识别，将域名映射成一个配置名
map $ssl_preread_server_name $backend_name {
www.domain1.com web1;
www.domain2.com web2;
# 域名都不匹配情况下的默认值
default web1;
}
# web1，配置转发详情,端口与下面server字段中www.mydomain.com监听端口一致
upstream web1 {
server ip:port;
}
#
# web2，配置转发详情,端口与下面server字段中www.mydomain.com监听端口一致
upstream web2 {
server ip:port;
}
#
# 监听 443 并开启 ssl_preread
server {
listen 443 reuseport;
# listen [::]:443 reuseport;
proxy_pass $backend_name;
ssl_preread on;
}
}
&lt;/code>&lt;/pre>
&lt;h3 id="15-加载配置文件">1.5 加载配置文件&lt;/h3>
&lt;pre>&lt;code>sudo systemctl daemon-reload
sudo sytemctl start nginx
然后检查启动是否正常
sudo sytemctl status nginx
sudo sytemctl enable nginx
&lt;/code>&lt;/pre>
&lt;p>访问https://www.domain1.com 看看是否正常.&lt;/p></description></item><item><title>在centos 7配置trojan go</title><link>/post/trojan-go-setup/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>/post/trojan-go-setup/</guid><description>&lt;h3 id="1-前置条件">1 前置条件&lt;/h3>
&lt;p>需要一个域名
需要一个 vps，安装好centos 7 或者 8&lt;/p>
&lt;h3 id="1-安装nginx">1 安装nginx&lt;/h3>
&lt;pre>&lt;code>sudo yum install -y epel-release
sudo yum update -y
sudo yum install nginx
sudo systemctl start nginx
sudo systemctl status nginx
&lt;/code>&lt;/pre>
&lt;p>检查nginx 版本,重点是检查 openssl是否支持1.1.1,只有1.1.1之后的版本,才能支持tls1.3&lt;/p>
&lt;pre>&lt;code> nginx -V
built by gcc 8.2.1 20180905 (Red Hat 8.2.1-3) (GCC)
built with OpenSSL 1.1.1 FIPS 11 Sep 2018 (running with OpenSSL 1.1.1c FIPS 28 May 2019)
TLS SNI support enabled
&lt;/code>&lt;/pre>
&lt;h3 id="2-申请证书">2 申请证书&lt;/h3>
&lt;pre>&lt;code>sudo yum install epel-release
sudo yum install certbot
&lt;/code>&lt;/pre>
&lt;p>打开 80 443 端口&lt;/p>
&lt;pre>&lt;code>sudo iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT
sudo iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT
#保存防火墙配置文件
sudo service iptables save
&lt;/code>&lt;/pre>
&lt;p>申请证书 ,修改email地址 和 域名 参数&lt;/p>
&lt;pre>&lt;code>#申请证书前，确保nginx工作正常
sudo systemctl start nginx
sudo systemctl status nginx
# 修改下面命令中的， email地址 和 域名
sudo certbot certonly --webroot --email your_email@xxx -w /usr/share/nginx/html -d xxx.your.site
&lt;/code>&lt;/pre>
&lt;p>如果看到&lt;/p>
&lt;pre>&lt;code>Congratulations! Your certificate and chain have been saved at:
/etc/letsencrypt/live/xxx.site/fullchain.pem
Your key file has been saved at:
/etc/letsencrypt/live/xxx.site/privkey.pem
说明申请成功了
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;p>设定certbot自动更新证书&lt;/p>
&lt;pre>&lt;code>#执行下面的命令
SLEEPTIME=$(awk 'BEGIN{srand(); print int(rand()*(3600+1))}'); echo &amp;quot;0 0,12 * * * root sleep $SLEEPTIME &amp;amp;&amp;amp; certbot renew -q&amp;quot; | sudo tee -a /etc/crontab &amp;gt; /dev/null
#检查/etc/crontab
sudo cat /etc/crontab
#如果有下面这句，说明自动更新证明任务已经注册
0 0,12 * * * root sleep 2380 &amp;amp;&amp;amp; certbot renew -q
#证书更新完成后，重启nginx和trojan-go
cd /etc/letsencrypt/renewal-hooks/post
sudo touch renew_post.sh
sudo chmod +x renew_post.sh
#在renew_post.sh文件中，增加
#!/bin/bash
nginx -s reload
#!/bin/bash
systemctl restart trojan-go
#测试一下证书更新流程。 如果后面trojian-go失败，不要担心，因为还没有安装，等trojan更新成功后，再执行一遍就行了。
sudo certbot renew --dry-run
&lt;/code>&lt;/pre>
&lt;p>修改/etc/nginx/conf.d/defaul.conf文件 ,注意把所有xxx.site修改为你自己的域名&lt;/p>
&lt;p>注意端口是4443，因为443留给了trojan-go，这里的4443是trojan-go回落后的端口&lt;/p>
&lt;pre>&lt;code>server {
# SSL configuration
listen 4443 ssl http2 default_server;
listen [::]:4443 ssl http2 default_server;
ssl_certificate /etc/letsencrypt/live/Yoursite.com/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/Yoursite.com/privkey.pem;
ssl_protocols TLSv1.2 TLSv1.3;
root /usr/share/nginx/html;
# Add index.php to the list if you are using PHP
index index.html index.htm index.nginx-debian.html;
server_name Yoursite.com;
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;p>重启nginx&lt;/p>
&lt;pre>&lt;code>sudo systemctl restart nginx
&lt;/code>&lt;/pre>
&lt;p>如果成功,这时候可以访问https://xxx.site/&lt;/p>
&lt;h3 id="3-在centos-7上配置trojan-go">3 在centos 7上配置trojan-go&lt;/h3>
&lt;p>下载trojan-go，并解压&lt;/p>
&lt;pre>&lt;code>cd
mkdir trojan-go
cd trojan-go
wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip
unzip trojan-go-linux-amd64.zip
sudo mkdir /etc/trojan-go
sudo cp trojan-go /etc/trojan-go
sudo cp *.dat /etc/trojan-go
&lt;/code>&lt;/pre>
&lt;p>服务器配置文件 /etc/trojan-go/server.json，注意修改yousite.com为你自己的站点域名&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;run_type&amp;quot;: &amp;quot;server&amp;quot;,
&amp;quot;local_addr&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
&amp;quot;local_port&amp;quot;: 443,
&amp;quot;remote_addr&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
&amp;quot;remote_port&amp;quot;: 80,
&amp;quot;password&amp;quot;: [
&amp;quot;修改为你的密码&amp;quot;
],
&amp;quot;ssl&amp;quot;: {
&amp;quot;cert&amp;quot;: &amp;quot;/etc/letsencrypt/live/Yousite.com/fullchain.pem&amp;quot;,
&amp;quot;key&amp;quot;: &amp;quot;/etc/letsencrypt/live/Yousite.com/privkey.pem&amp;quot;,
&amp;quot;sni&amp;quot;: &amp;quot;Yousite.com&amp;quot;,
&amp;quot;fallback&amp;quot;:&amp;quot;4443&amp;quot; #注意，这里的4443和前面nginx的端口对应。
},
&amp;quot;websocket&amp;quot;: {
&amp;quot;enabled&amp;quot;: true,
&amp;quot;path&amp;quot;: &amp;quot;/ws_path&amp;quot;,
&amp;quot;hostname&amp;quot;: &amp;quot;Yousite.com&amp;quot;
},
&amp;quot;router&amp;quot;:{
&amp;quot;enabled&amp;quot;: true,
&amp;quot;block&amp;quot;: [
&amp;quot;geoip:private&amp;quot;
]
}
}
&lt;/code>&lt;/pre>
&lt;p>建立trojan-go服务&lt;/p>
&lt;pre>&lt;code> sudo vi /etc/systemd/system/trojan-go.service
#文件内容如下
[Unit]
Description=Trojan-Go - An unidentifiable mechanism that helps you bypass GFW
Documentation=https://p4gefau1t.github.io/trojan-go/
After=network.target nss-lookup.target
[Service]
Type=simple
StandardError=journal
PIDFile=/usr/src/trojan/trojan/trojan.pid
ExecStart=/etc/trojan-go/trojan-go -config /etc/trojan-go/server.json
ExecReload=
ExecStop=/etc/trojan-go/trojan-go
Restart=on-failure
RestartSec=10s
LimitNOFILE=infinity
[Install]
WantedBy=multi-user.target
sudo systemctl daemon-reload
sudo systemctl start trojan-go
#检查trojan-go正常运行
sudo systemctl status trojan-go
#设置为启动后自动执行
sudo systemctl enable trojan-go
sudo systemctl enable nginx
#此时，再执行一下证书更新测试，应该一切正常了
sudo certbot renew --dry-run
&lt;/code>&lt;/pre>
&lt;h3 id="4-客户端配置trojan-go">4 客户端配置trojan-go&lt;/h3>
&lt;pre>&lt;code>{
&amp;quot;run_type&amp;quot;: &amp;quot;client&amp;quot;,
&amp;quot;local_addr&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
&amp;quot;local_port&amp;quot;: 1082,
&amp;quot;remote_addr&amp;quot;: &amp;quot;yousite.com&amp;quot;,
&amp;quot;remote_port&amp;quot;: 443,
&amp;quot;password&amp;quot;: [
&amp;quot;你的密码&amp;quot;
],
&amp;quot;ssl&amp;quot;: {
&amp;quot;sni&amp;quot;: &amp;quot;yousite.com&amp;quot;
},
&amp;quot;mux&amp;quot; :{
&amp;quot;enabled&amp;quot;: true,
&amp;quot;concurrency&amp;quot;: 8,
&amp;quot;idle_timeout&amp;quot;: 60
},
&amp;quot;websocket&amp;quot;: {
#如果想用cdn加速，把下面这行改成true
&amp;quot;enabled&amp;quot;: false,
&amp;quot;path&amp;quot;: &amp;quot;/ws_path&amp;quot;,
&amp;quot;hostname&amp;quot;: &amp;quot;yousite.com&amp;quot;
},
&amp;quot;router&amp;quot;:{
&amp;quot;enabled&amp;quot;: true,
&amp;quot;bypass&amp;quot;: [
&amp;quot;geoip:cn&amp;quot;,
&amp;quot;geoip:private&amp;quot;,
&amp;quot;geosite:cn&amp;quot;,
&amp;quot;geosite:geolocation-cn&amp;quot;
],
&amp;quot;block&amp;quot;: [
&amp;quot;geosite:category-ads&amp;quot;
],
&amp;quot;proxy&amp;quot;: [
&amp;quot;geosite:geolocation-!cn&amp;quot;
],
&amp;quot;default_policy&amp;quot;: &amp;quot;proxy&amp;quot;
}
}
&lt;/code>&lt;/pre></description></item><item><title>配置v2ray+ws+tls1.3+nginx</title><link>/post/setup-v2ray-ws-tls-nginx/</link><pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate><guid>/post/setup-v2ray-ws-tls-nginx/</guid><description>&lt;h3 id="1-安装nginx">1 安装nginx&lt;/h3>
&lt;pre>&lt;code>sudo yum install nginx
sudo systemctl start nginx
sudo systemctl status nginx
&lt;/code>&lt;/pre>
&lt;p>检查nginx 版本,重点是检查 openssl是否支持1.1.1,只有1.1.1之后的版本,才能支持tls1.3&lt;/p>
&lt;pre>&lt;code> nginx -V
built by gcc 8.2.1 20180905 (Red Hat 8.2.1-3) (GCC)
built with OpenSSL 1.1.1 FIPS 11 Sep 2018 (running with OpenSSL 1.1.1c FIPS 28 May 2019)
TLS SNI support enabled
&lt;/code>&lt;/pre>
&lt;h3 id="2-申请证书">2 申请证书&lt;/h3>
&lt;pre>&lt;code>sudo yum install epel-release
sudo yum install certbot
&lt;/code>&lt;/pre>
&lt;p>打开 80 443 端口&lt;/p>
&lt;pre>&lt;code>sudo iptables -I INPUT 4 -p tcp -m tcp --dport 80 -j ACCEPT
sudo iptables -I INPUT 4 -p tcp -m tcp --dport 443 -j ACCEPT
&lt;/code>&lt;/pre>
&lt;p>申请证书 ,修改email地址 和 域名 参数&lt;/p>
&lt;pre>&lt;code>sudo certbot certonly --webroot --email your_email@xxx -w /usr/share/nginx/html -d xxx.your.site
&lt;/code>&lt;/pre>
&lt;p>如果看到&lt;/p>
&lt;pre>&lt;code>Congratulations! Your certificate and chain have been saved at:
/etc/letsencrypt/live/xxx.site/fullchain.pem
Your key file has been saved at:
/etc/letsencrypt/live/xxx.site/privkey.pem
说明申请成功了
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;p>修改/etc/nginx/conf.d/defaul.conf文件 ,注意把所有xxx.site修改为你自己的域名&lt;/p>
&lt;pre>&lt;code>server {
# SSL configuration
listen 443 ssl http2 default_server;
listen [::]:443 ssl http2 default_server;
ssl_certificate /etc/letsencrypt/live/xxx.site/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/xxx.site/privkey.pem;
#ssl_protocols TLSv1.2 TLSv1.3;
ssl_protocols TLSv1.3;
root /usr/share/nginx/html;
#root /var/www;
# Add index.php to the list if you are using PHP
index index.html index.htm index.nginx-debian.html;
server_name xxx.site;
location /vray { #
proxy_redirect off;
proxy_pass http://127.0.0.1:9000;
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
proxy_set_header Host $http_host;
}
}
&lt;/code>&lt;/pre>
&lt;p>重启nginx&lt;/p>
&lt;pre>&lt;code>sudo systemctl restart nginx
&lt;/code>&lt;/pre>
&lt;p>如果成功,这时候可以访问https://xxx.site/&lt;/p>
&lt;h3 id="3-配置v2ray">3 配置v2ray&lt;/h3>
&lt;p>服务器侧关键数据&lt;/p>
&lt;pre>&lt;code>&amp;quot;inbound&amp;quot;: {
&amp;quot;port&amp;quot;: 9000, //(此端口与nginx配置相关)
&amp;quot;listen&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
&amp;quot;protocol&amp;quot;: &amp;quot;vmess&amp;quot;,
&amp;quot;settings&amp;quot;: {
&amp;quot;clients&amp;quot;: [
{
&amp;quot;id&amp;quot;: &amp;quot;xxxxx-xxxx-xxxx&amp;quot;,
&amp;quot;level&amp;quot;: 1,
&amp;quot;alterId&amp;quot;: 64 //此ID也需与客户端保持一致
}
]
},
&amp;quot;streamSettings&amp;quot;:{
&amp;quot;network&amp;quot;: &amp;quot;ws&amp;quot;,
&amp;quot;wsSettings&amp;quot;: {
&amp;quot;path&amp;quot;: &amp;quot;/vray&amp;quot; //与nginx配置相关
}
}
},
&amp;quot;outbound&amp;quot;: {
&amp;quot;protocol&amp;quot;: &amp;quot;freedom&amp;quot;,
&amp;quot;settings&amp;quot;: {}
},
&amp;quot;outboundDetour&amp;quot;: [
{
&amp;quot;protocol&amp;quot;: &amp;quot;blackhole&amp;quot;,
&amp;quot;settings&amp;quot;: {},
&amp;quot;tag&amp;quot;: &amp;quot;blocked&amp;quot;
}
],
&amp;quot;routing&amp;quot;: {
&amp;quot;strategy&amp;quot;: &amp;quot;rules&amp;quot;,
&amp;quot;settings&amp;quot;: {
&amp;quot;rules&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;field&amp;quot;,
&amp;quot;ip&amp;quot;: [
&amp;quot;0.0.0.0/8&amp;quot;,
&amp;quot;10.0.0.0/8&amp;quot;,
&amp;quot;100.64.0.0/10&amp;quot;,
&amp;quot;127.0.0.0/8&amp;quot;,
&amp;quot;169.254.0.0/16&amp;quot;,
&amp;quot;172.16.0.0/12&amp;quot;,
&amp;quot;192.0.0.0/24&amp;quot;,
&amp;quot;192.0.2.0/24&amp;quot;,
&amp;quot;192.168.0.0/16&amp;quot;,
&amp;quot;198.18.0.0/15&amp;quot;,
&amp;quot;198.51.100.0/24&amp;quot;,
&amp;quot;203.0.113.0/24&amp;quot;,
&amp;quot;::1/128&amp;quot;,
&amp;quot;fc00::/7&amp;quot;,
&amp;quot;fe80::/10&amp;quot;
],
&amp;quot;outboundTag&amp;quot;: &amp;quot;blocked&amp;quot;
}
]
}
}
&lt;/code>&lt;/pre>
&lt;p>客户段配置&lt;/p>
&lt;pre>&lt;code> &amp;quot;outbounds&amp;quot;: [
{
&amp;quot;protocol&amp;quot;: &amp;quot;vmess&amp;quot;,
&amp;quot;settings&amp;quot;: {
&amp;quot;vnext&amp;quot;: [
{
&amp;quot;address&amp;quot;: &amp;quot;xxx.xxx.xxx.xxx&amp;quot;,
&amp;quot;port&amp;quot;: 443, // 服务器端口
&amp;quot;users&amp;quot;: [
{
&amp;quot;id&amp;quot;: &amp;quot;xxx-xxxx-xxxx-xxxx&amp;quot;,
&amp;quot;alterId&amp;quot;: 64,
&amp;quot;security&amp;quot;: &amp;quot;aes-128-gcm&amp;quot;
}
]
}
]
},
&amp;quot;streamSettings&amp;quot;:{
&amp;quot;network&amp;quot;: &amp;quot;ws&amp;quot;,
&amp;quot;security&amp;quot;: &amp;quot;tls&amp;quot;,
&amp;quot;tlsSettings&amp;quot;: {
&amp;quot;serverName&amp;quot;: &amp;quot;xxx.site&amp;quot;
},
&amp;quot;wsSettings&amp;quot;: {
&amp;quot;path&amp;quot;: &amp;quot;/vray&amp;quot;
}
},
&amp;quot;tag&amp;quot;: &amp;quot;forgin&amp;quot;
},
{
// Protocol name of the outbound proxy.
&amp;quot;protocol&amp;quot;: &amp;quot;freedom&amp;quot;,
// Settings of the protocol. Varies based on protocol.
&amp;quot;settings&amp;quot;: {},
// Tag of the outbound. May be used for routing.
&amp;quot;tag&amp;quot;: &amp;quot;direct&amp;quot;
},{
&amp;quot;protocol&amp;quot;: &amp;quot;blackhole&amp;quot;,
&amp;quot;settings&amp;quot;: {},
&amp;quot;tag&amp;quot;: &amp;quot;blocked&amp;quot;
}],
// Transport is for global transport settings. If you have multiple transports with same settings
// (say mKCP), you may put it here, instead of in each individual inbound/outbounds.
//&amp;quot;transport&amp;quot;: {},
// Routing controls how traffic from inbounds are sent to outbounds.
&amp;quot;routing&amp;quot;: {
&amp;quot;domainStrategy&amp;quot;: &amp;quot;IPOnDemand&amp;quot;,
&amp;quot;rules&amp;quot;:[
{
// Blocks access to private IPs. Remove this if you want to access your router.
&amp;quot;type&amp;quot;: &amp;quot;field&amp;quot;,
&amp;quot;ip&amp;quot;: [&amp;quot;geoip:private&amp;quot;],
&amp;quot;outboundTag&amp;quot;: &amp;quot;blocked&amp;quot;
},
{
// Blocks major ads.
&amp;quot;type&amp;quot;: &amp;quot;field&amp;quot;,
&amp;quot;domain&amp;quot;: [&amp;quot;geosite:category-ads&amp;quot;],
&amp;quot;outboundTag&amp;quot;: &amp;quot;blocked&amp;quot;
}
]
},
&lt;/code>&lt;/pre></description></item></channel></rss>