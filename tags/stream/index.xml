<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>stream on 麦克的茶馆</title><link>https://mikechen163.github.io/tags/stream/</link><description>Recent content in stream on 麦克的茶馆</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 31 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mikechen163.github.io/tags/stream/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx配置指南：支持多域名HTTPS和代理协议</title><link>https://mikechen163.github.io/post/config-nginx-detail-case/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><guid>https://mikechen163.github.io/post/config-nginx-detail-case/</guid><description>&lt;h1 id="nginx配置指南支持多域名https和proxy_protocol协议">Nginx配置指南：支持多域名HTTPS和proxy_protocol协议&lt;/h1>
&lt;p>引言
在当今的web服务架构中，Nginx作为一个强大的web服务器和反向代理服务器，扮演着至关重要的角色。本文将详细介绍如何配置Nginx以支持多域名HTTPS和代理协议，涵盖了几种常见的场景。我们将从基本的配置开始，逐步深入到更复杂的设置。&lt;/p>
&lt;h2 id="场景1多域名https和sni">场景1：多域名HTTPS和SNI&lt;/h2>
&lt;p>首先，让我们看看如何配置Nginx来支持多个HTTPS域名，并使用SNI（服务器名称指示）将流量路由到不同的后端服务器。&lt;/p>
&lt;pre>&lt;code>stream {
log_format basic '$remote_addr [$time_local] '
'$protocol $status $bytes_sent $bytes_received '
'$session_time &amp;quot;$upstream_addr&amp;quot; '
'&amp;quot;$ssl_preread_server_name&amp;quot;';
access_log /var/log/nginx/stream-access.log basic;
error_log /var/log/nginx/stream-error.log;
map $ssl_preread_server_name $backend_name {
example1.com backend1;
example2.com backend2;
default backend_default;
}
upstream backend1 {
server 192.168.1.10:443;
}
upstream backend2 {
server 192.168.1.20:443;
}
upstream backend_default {
server 192.168.1.30:443;
}
server {
listen 443;
proxy_pass $backend_name;
ssl_preread on;
proxy_protocol on;
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置的主要特点：&lt;/p>
&lt;p>使用stream模块处理TCP流量。
定义自定义日志格式，包含SNI信息。
使用map指令根据SNI选择后端服务器。
配置多个上游服务器组。
在服务器块中启用SSL预读和代理协议。&lt;/p>
&lt;h2 id="场景2后端nginx-https服务器配置">场景2：后端Nginx HTTPS服务器配置&lt;/h2>
&lt;p>当后端服务器也使用Nginx时，我们需要配置它来处理HTTPS请求并支持代理协议。以下是一个示例配置：&lt;/p>
&lt;pre>&lt;code>http {
log_format main '$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; '
'$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; '
'&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;';
access_log /var/log/nginx/access.log main;
error_log /var/log/nginx/error.log;
set_real_ip_from 192.168.1.0/24;
real_ip_header proxy_protocol;
server {
listen 443 ssl proxy_protocol;
server_name example1.com;
ssl_certificate /path/to/your/fullchain.pem;
ssl_certificate_key /path/to/your/privkey.pem;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
add_header Strict-Transport-Security &amp;quot;max-age=31536000; includeSubDomains&amp;quot; always;
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection &amp;quot;1; mode=block&amp;quot;;
root /var/www/example1.com;
index index.html index.htm;
location / {
try_files $uri $uri/ =404;
}
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置的主要特点：&lt;/p>
&lt;p>启用代理协议以获取真实客户端IP。
配置SSL证书和安全选项。
添加安全相关的HTTP头。
设置网站根目录和默认文件。&lt;/p>
&lt;h2 id="场景3后端http服务代理">场景3：后端HTTP服务代理&lt;/h2>
&lt;p>有时，后端服务可能运行在HTTP上，而我们希望在前端提供HTTPS。以下是如何配置Nginx作为SSL终止代理：&lt;/p>
&lt;pre>&lt;code>http {
# ... 之前的日志和IP配置 ...
upstream backend {
server 127.0.0.1:8200;
}
server {
listen 443 ssl proxy_protocol;
server_name example1.com;
# ... SSL配置和安全头部 ...
location / {
proxy_pass http://backend;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
}
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置将HTTPS请求转发到本地运行的HTTP服务，同时保留客户端信息。&lt;/p>
&lt;h2 id="场景4处理不支持代理协议的后端https服务">场景4：处理不支持代理协议的后端HTTPS服务&lt;/h2>
&lt;p>最后，让我们看看如何处理前端使用代理协议，但后端HTTPS服务不支持代理协议的情况：&lt;/p>
&lt;pre>&lt;code>stream {
# ... 之前的日志配置 ...
upstream backend_with_proxy_protocol {
server 127.0.0.1:8443;
}
upstream real_backend {
server 192.168.1.10:443;
}
server {
listen 443;
proxy_pass backend_with_proxy_protocol;
ssl_preread on;
proxy_protocol on;
}
server {
listen 8443 proxy_protocol;
proxy_pass real_backend;
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置创建了一个中间层，它接收带有代理协议的连接，然后将纯HTTPS流量转发给后端服务。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>通过这些配置示例，我们展示了Nginx在处理HTTPS流量、支持多域名、使用代理协议以及作为SSL终止代理方面的灵活性。根据您的具体需求，您可以混合和匹配这些配置来创建适合您的架构的设置。&lt;/p>
&lt;p>记住，在应用这些配置时，始终要根据您的实际环境调整IP地址、域名和证书路径。此外，定期更新Nginx和SSL证书，并关注最新的安全最佳实践，以确保您的服务器配置始终安全和高效。&lt;/p></description></item><item><title>配置nginx,使用stream 模式,并且传递realip 给server</title><link>https://mikechen163.github.io/post/config-nginx-stream-realip/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><guid>https://mikechen163.github.io/post/config-nginx-stream-realip/</guid><description>&lt;h1 id="如何配置-nginx-stream-realip-传递并隐藏真实域名">如何配置 Nginx Stream RealIP 传递并隐藏真实域名&lt;/h1>
&lt;p>在现代的网络架构中，使用 Nginx 作为反向代理服务器是非常常见的。为了增强安全性并隐藏真实的域名，我们可以配置 Nginx 的 real_ip 模块来传递客户端的真实 IP 地址，并通过 SSL/TLS 加密来保护数据传输。本文将详细介绍如何配置 Nginx 来实现这一目标。&lt;/p>
&lt;h2 id="stream部分配置概述">stream部分配置概述&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f;font-weight:bold">stream&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic"># 这里就是 SNI 识别，将域名映射成一个配置名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">map&lt;/span> &lt;span style="color:#b8860b">$ssl_preread_server_name&lt;/span> &lt;span style="color:#b8860b">$backend_name&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">domain1.example.com&lt;/span> 127.0.0.1:&lt;span style="color:#666">8888&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">#这个服务本机提供
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">domain2.example.com&lt;/span> 127.0.0.1:&lt;span style="color:#666">8890&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">default&lt;/span> &lt;span style="color:#b44">naive&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic"># 监听 443 并开启 ssl_preread
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">listen&lt;/span> &lt;span style="color:#666">443&lt;/span> &lt;span style="color:#b44">reuseport&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic"># listen [::]:443 reuseport;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#b8860b">$backend_name&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">proxy_protocol&lt;/span> &lt;span style="color:#800">on&lt;/span>;&lt;span style="color:#080;font-style:italic"># send ip info to http server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">ssl_preread&lt;/span> &lt;span style="color:#800">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic"># 这里的SNI不需要自己处理,之间转发给8889端口上的服务处理,,相当于把 443端口的服务,转发到8889服务
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">listen&lt;/span> &lt;span style="color:#666">8888&lt;/span> &lt;span style="color:#b44">proxy_protocol&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">proxy_pass&lt;/span> 127.0.0.1:&lt;span style="color:#666">8889&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>##配置本机服务,终结ssl,并且使用用户的真实ip&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f;font-weight:bold">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">set_real_ip_from&lt;/span> &lt;span style="color:#666">127&lt;/span>&lt;span style="color:#b44">.0.0.1/32&lt;/span>; &lt;span style="color:#080;font-style:italic"># 前端 Nginx 的 IP 范围
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">real_ip_header&lt;/span> &lt;span style="color:#b44">proxy_protocol&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f;font-weight:bold">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">listen&lt;/span> &lt;span style="color:#666">8890&lt;/span> &lt;span style="color:#b44">ssl&lt;/span> &lt;span style="color:#b44">http2&lt;/span> &lt;span style="color:#b44">proxy_protocol&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">listen&lt;/span> &lt;span style="color:#b44">[::]:8890&lt;/span> &lt;span style="color:#b44">ssl&lt;/span> &lt;span style="color:#b44">http2&lt;/span> &lt;span style="color:#b44">proxy_protocol&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">server_name&lt;/span> &lt;span style="color:#b44">domain2.example.com&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">#改成你的ssl证书路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">ssl_certificate&lt;/span> &lt;span style="color:#b44">/path/to/fullchain.pem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">ssl_certificate_key&lt;/span> &lt;span style="color:#b44">/path/to/privkey.pem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">ssl_protocols&lt;/span> &lt;span style="color:#b44">TLSv1.2&lt;/span> &lt;span style="color:#b44">TLSv1.3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">location&lt;/span> &lt;span style="color:#b44">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic"># 假设真实服务在8200端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#b44">http://localhost:8200&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#b44">Host&lt;/span> &lt;span style="color:#b8860b">$host&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#b44">X-Real-IP&lt;/span> &lt;span style="color:#b8860b">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#b44">X-Forwarded-For&lt;/span> &lt;span style="color:#b8860b">$proxy_add_x_forwarded_for&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#b44">X-Forwarded-Proto&lt;/span> &lt;span style="color:#b8860b">$scheme&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>##总结
通过以上配置，我们可以实现以下目标：&lt;/p>
&lt;ul>
&lt;li>使用 ssl_preread 和 proxy_protocol 在 HTTPS 连接中传递客户端的真实 IP 地址。&lt;/li>
&lt;li>配置 real_ip 模块以正确识别客户端的真实 IP 地址。&lt;/li>
&lt;li>使用 SSL/TLS 加密来保护数据传输，并隐藏真实的域名。&lt;/li>
&lt;li>通过这些步骤，您可以确保 Nginx 能够安全地传递客户端的真实 IP 地址，并隐藏真实的域名，从而提高系统的安全性和隐私保护。&lt;/li>
&lt;/ul></description></item><item><title>centos 8启用nginx stream ssl preread module</title><link>https://mikechen163.github.io/post/nginx-stream-preread-enable/</link><pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate><guid>https://mikechen163.github.io/post/nginx-stream-preread-enable/</guid><description>&lt;p>目标: 为了让nginx服务器,根据不同的域名,转发到不同的app服务器. tls并不终结在nginx,而是转发到最终的app服务器.&lt;/p>
&lt;p>在centos 8上,运行&lt;/p>
&lt;pre>&lt;code>#nginx -V
结果:
nginx version: nginx/1.14.1
built by gcc 8.5.0 20210514 (Red Hat 8.5.0-3) (GCC)
built with OpenSSL 1.1.1k FIPS 25 Mar 2021
TLS SNI support enabled
configure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body \
--http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \
--http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx \
--user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
--with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic \
--with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \
--with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module \
--with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic \
--with-stream_ssl_module --with-debug --with-cc-opt='-O2 -g -pipe -Wall -Werror=format-security -Wp,\
-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches \
-specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic \
-fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E
&lt;/code>&lt;/pre>
&lt;p>这里面,主要是看有没有 &amp;ldquo;&amp;ndash;with-stream_ssl_preread_module&amp;rdquo; 这个参数,没有这个参数,nginx没法提前从流里面得到域名,也就无法转发,需要重新编译nginx&lt;/p>
&lt;h2 id="1-重新编译nginx">1 重新编译nginx&lt;/h2>
&lt;h3 id="11-下载nginx的源码">1.1 下载nginx的源码.&lt;/h3>
&lt;p>为了最小改动,选择1.14.2版本&lt;/p>
&lt;pre>&lt;code>wget https://nginx.org/download/nginx-1.14.2.tar.gz
tar zxvf nginx-1.14.2.tar.gz
cd nginx-1.14.2
&lt;/code>&lt;/pre>
&lt;h3 id="12-安装编译环境以及需要的包">1.2 安装编译环境,以及需要的包.&lt;/h3>
&lt;pre>&lt;code>sudo yum -y groupinstall &amp;quot;Development Tools&amp;quot;
sudo yum -y install libxslt-devel
sudo yum -y install gd gd-devel
sudo yum -y install pcre-devel
sudo yum -y install perl-ExtUtils-Embed
&lt;/code>&lt;/pre>
&lt;h3 id="13-编译nginx">1.3 编译nginx&lt;/h3>
&lt;pre>&lt;code>/configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid \
--lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module \
--with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module\
--with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module \
--with-stream_ssl_preread_module --with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic \
--with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-debug \
--with-cc-opt='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches\
-specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 \
-mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' \
--with-ld-opt='-Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E'
成功之后
make
成功之后,先删掉原来的nginx
sudo yum remove nginx
安装新编译好的nginx
sudo make install
&lt;/code>&lt;/pre>
&lt;h3 id="14-修改配置文件">1.4 修改配置文件&lt;/h3>
&lt;pre>&lt;code>sudo vi /etc/systemd/system/nginx.service
内容如下:
[Unit]
Description=The nginx HTTP and reverse proxy server
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target
[Service]
Type=forking
PIDFile=/run/nginx.pid
# Nginx will fail to start if /run/nginx.pid already exists but has the wrong
# SELinux context. This might happen when running `nginx -t` from the cmdline.
# https://bugzilla.redhat.com/show_bug.cgi?id=1268621
ExecStartPre=/usr/bin/rm -f /run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
KillSignal=SIGQUIT
TimeoutStopSec=5
KillMode=mixed
PrivateTmp=true
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>
&lt;p>然后执行&lt;/p>
&lt;pre>&lt;code> sudo systemctl daemon-reload
&lt;/code>&lt;/pre>
&lt;p>编辑 /etc/nginx/nginx.conf
在文件第一行,增加&lt;/p>
&lt;pre>&lt;code>load_module /usr/lib64/nginx/modules/ngx_stream_module.so;
stream {
# 这里就是 SNI 识别，将域名映射成一个配置名
map $ssl_preread_server_name $backend_name {
www.domain1.com web1;
www.domain2.com web2;
# 域名都不匹配情况下的默认值
default web1;
}
# web1，配置转发详情,端口与下面server字段中www.mydomain.com监听端口一致
upstream web1 {
server ip:port;
}
#
# web2，配置转发详情,端口与下面server字段中www.mydomain.com监听端口一致
upstream web2 {
server ip:port;
}
#
# 监听 443 并开启 ssl_preread
server {
listen 443 reuseport;
# listen [::]:443 reuseport;
proxy_pass $backend_name;
ssl_preread on;
}
}
&lt;/code>&lt;/pre>
&lt;h3 id="15-加载配置文件">1.5 加载配置文件&lt;/h3>
&lt;pre>&lt;code>sudo systemctl daemon-reload
sudo sytemctl start nginx
然后检查启动是否正常
sudo sytemctl status nginx
sudo sytemctl enable nginx
&lt;/code>&lt;/pre>
&lt;p>访问https://www.domain1.com 看看是否正常.&lt;/p></description></item></channel></rss>