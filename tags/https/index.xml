<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>https on 麦克的茶馆</title><link>https://mikechen163.github.io/tags/https/</link><description>Recent content in https on 麦克的茶馆</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 11 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mikechen163.github.io/tags/https/index.xml" rel="self" type="application/rss+xml"/><item><title>配置goaccess 访问日志系统</title><link>https://mikechen163.github.io/post/config-goaccess/</link><pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate><guid>https://mikechen163.github.io/post/config-goaccess/</guid><description>&lt;h1 id="1-配置goaccess-日志系统">1 配置goaccess 日志系统&lt;/h1>
&lt;p>引言
本文主要介绍,如何快速搭建一个可以查看nginx 访问日志的监控系统&lt;/p>
&lt;h2 id="11-安装并配置goaccess">1.1 安装并配置goaccess&lt;/h2>
&lt;p>以centos/alma linux为例子&lt;/p>
&lt;p>直接安装&lt;/p>
&lt;pre>&lt;code>sudo yum install goaccess
&lt;/code>&lt;/pre>
&lt;p>安装成功成功之后&lt;/p>
&lt;pre>&lt;code> sudo vi /etc/goaccess/goaccess.conf
&lt;/code>&lt;/pre>
&lt;p>在文件最末端,添加下面的格式定义(nginx缺省格式),如果格式不同,请检查goaccess的相关资料,这里默认按照nginx缺省格式&lt;/p>
&lt;pre>&lt;code> time-format %H:%M:%S
date-format %d/%b/%Y
log-format %h %^[%d:%t %^] &amp;quot;%r&amp;quot; %s %b &amp;quot;%R&amp;quot; &amp;quot;%u&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>对应的 /etc/nginx/nginx.conf的格式定义应为&lt;/p>
&lt;pre>&lt;code> http {
log_format main '$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; '
'$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; '
'&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;';
access_log /var/log/nginx/access.log main;
&lt;/code>&lt;/pre>
&lt;p>在 /var/www目录下,建立一个goaccess目录,并修改权限&lt;/p>
&lt;pre>&lt;code>cd /var/www
mkdir goaccess
sudo chown -R nginx:nginx /var/www/goaccess
sudo chmod -R 755 /var/www/goaccess
&lt;/code>&lt;/pre>
&lt;p>执行下面的命令,正常情况下,应该 /var/www/goaccess目录下,生产一个 index.html文件,这个就是日志访问记录文件,用浏览器打开就能看到访问数据了.&lt;/p>
&lt;pre>&lt;code> sudo goaccess /var/log/nginx/access.log -o /var/www/goaccess/index.html --log-format=COMBINED
&lt;/code>&lt;/pre>
&lt;h2 id="12-通过web访问日志文件">1.2 通过web访问日志文件&lt;/h2>
&lt;p>假设你的 域名配置 goaccess.example.com,那么参考配置为 ,把域名和证书改成你自己的&lt;/p>
&lt;pre>&lt;code># goaccess system
server {
listen 8800 ssl http2; # Listen for HTTPS on port
listen [::]:8800 ssl http2; # Listen for IPv6 traffic as well
server_name goaccess.example.com; # Replace with your actual domain
# SSL configuration
ssl_certificate /path/fullchain.pem;
ssl_certificate_key /path/privkey.pem;
ssl_protocols TLSv1.2 TLSv1.3;
location / {
root /var/www/goaccess;
index index.html;
}
}
&lt;/code>&lt;/pre>
&lt;p>检查配置文件正确行&lt;/p>
&lt;pre>&lt;code>sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
&lt;/code>&lt;/pre>
&lt;p>如果成功,重启服务后,访问 goaccess.example.com应该就能看到访问数据了.&lt;/p>
&lt;pre>&lt;code> sudo systemctl restart nginx
&lt;/code>&lt;/pre>
&lt;h2 id="13-配置etccrontab定时更新数据">1.3 配置/etc/crontab,定时更新数据&lt;/h2>
&lt;p>修改 /etc/crontab,增加一行 goaccess配置.前面一行是定时更新证书的命令,保存&lt;/p>
&lt;pre>&lt;code>0 0,12 * * * root sleep 2380 &amp;amp;&amp;amp; certbot renew -q
0 * * * * root goaccess /var/log/nginx/access.log -o /var/www/goaccess/index.html --log-format=COMBINED
&lt;/code>&lt;/pre>
&lt;p>重启crond服务&lt;/p>
&lt;pre>&lt;code>sudo systemctl restart crond
&lt;/code>&lt;/pre></description></item><item><title>Nginx配置指南：支持多域名HTTPS和代理协议</title><link>https://mikechen163.github.io/post/config-nginx-detail-case/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><guid>https://mikechen163.github.io/post/config-nginx-detail-case/</guid><description>&lt;h1 id="nginx配置指南支持多域名https和proxy_protocol协议">Nginx配置指南：支持多域名HTTPS和proxy_protocol协议&lt;/h1>
&lt;p>引言
在当今的web服务架构中，Nginx作为一个强大的web服务器和反向代理服务器，扮演着至关重要的角色。本文将详细介绍如何配置Nginx以支持多域名HTTPS和代理协议，涵盖了几种常见的场景。我们将从基本的配置开始，逐步深入到更复杂的设置。&lt;/p>
&lt;h2 id="场景1多域名https和sni">场景1：多域名HTTPS和SNI&lt;/h2>
&lt;p>首先，让我们看看如何配置Nginx来支持多个HTTPS域名，并使用SNI（服务器名称指示）将流量路由到不同的后端服务器。&lt;/p>
&lt;pre>&lt;code>stream {
log_format basic '$remote_addr [$time_local] '
'$protocol $status $bytes_sent $bytes_received '
'$session_time &amp;quot;$upstream_addr&amp;quot; '
'&amp;quot;$ssl_preread_server_name&amp;quot;';
access_log /var/log/nginx/stream-access.log basic;
error_log /var/log/nginx/stream-error.log;
map $ssl_preread_server_name $backend_name {
example1.com backend1;
example2.com backend2;
default backend_default;
}
upstream backend1 {
server 192.168.1.10:443;
}
upstream backend2 {
server 192.168.1.20:443;
}
upstream backend_default {
server 192.168.1.30:443;
}
server {
listen 443;
proxy_pass $backend_name;
ssl_preread on;
proxy_protocol on;
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置的主要特点：&lt;/p>
&lt;p>使用stream模块处理TCP流量。
定义自定义日志格式，包含SNI信息。
使用map指令根据SNI选择后端服务器。
配置多个上游服务器组。
在服务器块中启用SSL预读和代理协议。&lt;/p>
&lt;h2 id="场景2后端nginx-https服务器配置">场景2：后端Nginx HTTPS服务器配置&lt;/h2>
&lt;p>当后端服务器也使用Nginx时，我们需要配置它来处理HTTPS请求并支持代理协议。以下是一个示例配置：&lt;/p>
&lt;pre>&lt;code>http {
log_format main '$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; '
'$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; '
'&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;';
access_log /var/log/nginx/access.log main;
error_log /var/log/nginx/error.log;
set_real_ip_from 192.168.1.0/24;
real_ip_header proxy_protocol;
server {
listen 443 ssl proxy_protocol;
server_name example1.com;
ssl_certificate /path/to/your/fullchain.pem;
ssl_certificate_key /path/to/your/privkey.pem;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
add_header Strict-Transport-Security &amp;quot;max-age=31536000; includeSubDomains&amp;quot; always;
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection &amp;quot;1; mode=block&amp;quot;;
root /var/www/example1.com;
index index.html index.htm;
location / {
try_files $uri $uri/ =404;
}
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置的主要特点：&lt;/p>
&lt;p>启用代理协议以获取真实客户端IP。
配置SSL证书和安全选项。
添加安全相关的HTTP头。
设置网站根目录和默认文件。&lt;/p>
&lt;h2 id="场景3后端http服务代理">场景3：后端HTTP服务代理&lt;/h2>
&lt;p>有时，后端服务可能运行在HTTP上，而我们希望在前端提供HTTPS。以下是如何配置Nginx作为SSL终止代理：&lt;/p>
&lt;pre>&lt;code>http {
# ... 之前的日志和IP配置 ...
upstream backend {
server 127.0.0.1:8200;
}
server {
listen 443 ssl proxy_protocol;
server_name example1.com;
# ... SSL配置和安全头部 ...
location / {
proxy_pass http://backend;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
}
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置将HTTPS请求转发到本地运行的HTTP服务，同时保留客户端信息。&lt;/p>
&lt;h2 id="场景4处理不支持代理协议的后端https服务">场景4：处理不支持代理协议的后端HTTPS服务&lt;/h2>
&lt;p>最后，让我们看看如何处理前端使用代理协议，但后端HTTPS服务不支持代理协议的情况：&lt;/p>
&lt;pre>&lt;code>stream {
# ... 之前的日志配置 ...
upstream backend_with_proxy_protocol {
server 127.0.0.1:8443;
}
upstream real_backend {
server 192.168.1.10:443;
}
server {
listen 443;
proxy_pass backend_with_proxy_protocol;
ssl_preread on;
proxy_protocol on;
}
server {
listen 8443 proxy_protocol;
proxy_pass real_backend;
}
&lt;/code>&lt;/pre>
&lt;p>}
这个配置创建了一个中间层，它接收带有代理协议的连接，然后将纯HTTPS流量转发给后端服务。&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>通过这些配置示例，我们展示了Nginx在处理HTTPS流量、支持多域名、使用代理协议以及作为SSL终止代理方面的灵活性。根据您的具体需求，您可以混合和匹配这些配置来创建适合您的架构的设置。&lt;/p>
&lt;p>记住，在应用这些配置时，始终要根据您的实际环境调整IP地址、域名和证书路径。此外，定期更新Nginx和SSL证书，并关注最新的安全最佳实践，以确保您的服务器配置始终安全和高效。&lt;/p></description></item></channel></rss>